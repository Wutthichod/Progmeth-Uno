@startuml
class logic.card.WildCardDrawFourCard {
+ <<Create>> WildCardDrawFourCard()
+ String toString()
+ void useEffect()
}

class logic.card.SkipCard {
+ <<Create>> SkipCard(CardColor)
+ void useEffect()
}

abstract class logic.card.EffectCard {
- CardEffect effect
+ <<Create>> EffectCard(CardColor,CardEffect)
+ {abstract}void useEffect()
+ void play()
+ boolean isPlayable(BaseCard)
+ String toString()
+ CardEffect getEffect()
}


abstract class logic.card.BaseCard {
- CardColor color
+ <<Create>> BaseCard(CardColor)
+ {abstract}void play()
+ {abstract}boolean isPlayable(BaseCard)
+ {abstract}String toString()
+ CardColor getColor()
+ void setColor(CardColor)
}


class logic.card.ReverseCard {
+ <<Create>> ReverseCard(CardColor)
+ void useEffect()
}

class logic.card.NumberCard {
- int number
+ <<Create>> NumberCard(CardColor,int)
+ void play()
+ boolean isPlayable(BaseCard)
+ String toString()
+ int getNumber()
}


class logic.card.DrawTwoCard {
+ <<Create>> DrawTwoCard(CardColor)
+ void useEffect()
}



logic.card.EffectCard <|-- logic.card.WildCardDrawFourCard
logic.card.EffectCard <|-- logic.card.SkipCard
logic.card.BaseCard <|-- logic.card.EffectCard
logic.card.EffectCard <|-- logic.card.ReverseCard
logic.card.BaseCard <|-- logic.card.NumberCard
logic.card.EffectCard <|-- logic.card.DrawTwoCard
@enduml